= f.input :name, as: :name,  label: 'Title'
= f.input :blog_id, collection: BcmsBlog::Blog.editable_by(current_user).map{|b| [b.name, b.id]}, include_blank: true


:javascript
  $(function() {
    elem = $( "div.categories ")
    elem.hide();
    elem.prop( "disabled", true );
    elem.find("select, input").prop( "disabled", true );

    if($( "#blog_post_blog_id" ).val() != ""){
      elem = $( "div.categories[id="+ $( "#blog_post_blog_id" ).val()  +"]" );
      elem.show();
      elem.find("select, input").prop( "disabled", false );
    }

    $( "#blog_post_blog_id" ).change(function() {
      elem = $( "div.categories" )
      elem.hide();
      elem.find("select, input").prop( "disabled", true );

      elem = $( "div.categories[id="+ $( "#blog_post_blog_id" ).val()  +"]" );
      elem.show();
      elem.find("select, input").prop( "disabled", false );
    });
  });

%hr/

%blockquote
  %p
    The 'published' date/time for the post which is displayed publically.
= f.input :published_at, as: :date_picker, :label => "Date", input_html: { value: ( f.object.published_at ? f.object.published_at.strftime('%Y/%m/%d') : nil ) || Time.now.strftime('%Y/%m/%d') }

-# - unless @block.new_record?
%hr/
%blockquote
  %p
    Set the author name.
    By default the author name will be generated from assigned user data.

    If the author name is provided it take precedence on above.
    If you like to hide author name - please select 'hide author' checkbox.

= f.input :author_id, collection: Cms::User.all.map { |u| ["#{u.full_name} (#{u.login})", u.id] }
= f.input :author_name
= f.input :hide_author, as: :boolean, label: "Should the author be hidden", boolean_style: :inline


%hr/

%blockquote
  %p
    If Blog Post is featured it will be presented first on homepage
= f.input :on_homepage, as: :boolean, label: "Should the blog post be featured on homepage", boolean_style: :inline

%hr/
%blockquote
  %p
    If Blog Post is featured it will be presented first on hub page
= f.input :featured, as: :boolean, label: "Should the blog post be featured", boolean_style: :inline

%blockquote
  %p
    If case study image should have darker filter over images
= f.input :dark_filter_enabled, as: :boolean, label: "Darker filter over images", boolean_style: :inline

%hr/
%blockquote
  %p
    Please select Blog Post categories

- BcmsBlog::Blog.editable_by(current_user).each do |b|
  .categories{id:b.id}
    = f.association :categories, collection: categories_by_type_id(b.category_type.id).select{|c| c.parent.nil? }.map{|c| [c.path, c.id]}, :include_blank => true
    = f.association :subcategories, collection: categories_by_type_id(b.category_type.id).select{|c| !c.parent.nil? }.map{|c| [c.path, c.id]}, :include_blank => true

  -# = f.association :categories, collection: categories_by_type_id(params[:category_type_id]).select{|c| c.parent.nil? }.map{|c| [c.path, c.id]}, :include_blank => true
  -# = f.association :subcategories, collection: categories_by_type_id(params[:category_type_id]).select{|c| !c.parent.nil? }.map{|c| [c.path, c.id]}, :include_blank => true

%hr/
%blockquote
  %p
    Provide Blog post summary
= f.input :summary, :style => "height: 200px", :instructions => 'This will be displayed on the list page with a Read More link if present'

%hr/
%blockquote
  %p
    Provide Blog Post content
= f.input :body, as: :text_editor

%hr/
%blockquote
  %p
    Provide Blog Post Email Summary (shorter than 175 words)
= f.input :email_summary

%hr/
%blockquote
  %p
    There is following precedense for media to be selected as a teaser view on hub and homepage
    %ol
      %li
        Uploaded Video
      %li
        Video URL
      %li
        Uploaded Image
      %li
        Image Url

.attachments-row
  = f.input :video, :as => :file_picker, :label => "Blog Post Video"
%hr/

= f.input :video_url, :label => "Blog Post Video Url" , as: :url
- unless @block.video_url.nil?
  = video_tag @block.video_url
%hr/

.attachments-row
  = f.input :file, :as => :file_picker, :label => "Blog Post Image"

  - image_url = false
  - unless @block.file.nil?
    - image_url = @block.file.versioned_url

- browser = UserAgent.parse(request.user_agent).browser
- if browser == "Firefox" or browser == "Chrome"
  :javascript
    $(function() {
      $("#blog_post_file").picEdit({
        defaultImage: "#{image_url}",
        formSubmitted: function(request){
          if (request.readyState === 4)  {
            var urlArr = request.responseURL.split('/');
            if (parseInt(urlArr[urlArr.length-1]).toString() !== 'NaN') {
              window.location = request.responseURL;
            } else {
              var newDoc = document.open("text/html", "replace");
              newDoc.write(request.responseText);
              newDoc.close();
            }
          }
        }
      }
      );
    });

%hr/

= f.input :image_url, :label => "Blog Post Image Url", as: :url
- unless @block.image_url.nil?
  = image_tag @block.image_url
%hr/


%hr/
%blockquote
  %p Meta tags
= f.input :meta_keywords
= f.input :meta_description
